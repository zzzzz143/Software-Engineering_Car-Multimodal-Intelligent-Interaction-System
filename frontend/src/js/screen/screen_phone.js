/**
 * ËΩ¶ËΩΩÈÄöËØùÁ≥ªÁªü JavaScript ÊéßÂà∂Âô®
 * ÂÆûÁé∞Êã®Âè∑„ÄÅÊù•Áîµ„ÄÅÈÄöËØùÁ≠âÂäüËÉΩ
 */


export class CarPhoneSystem {
    constructor() {
        this.currentCall = null;
        this.callTimer = null;
        this.callStartTime = null;
        this.isInCall = false;
        this.isMuted = false;
        this.isSpeakerOn = false;
        this.isOnHold = false;
        
        // Ê®°ÊãüËÅîÁ≥ª‰∫∫Êï∞ÊçÆ
        this.contacts = {
            '13800138000': 'Âº†‰∏â',
            '13900139000': 'ÊùéÂõõ',
            '13700137000': 'Áéã‰∫î',
            '021-12345678': 'ÂÆ∂',
            '021-87654321': 'ÂÖ¨Âè∏',
            '400-123-4567': 'ÈÅìË∑ØÊïëÊè¥',
            '120': 'ÊÄ•Êïë‰∏≠ÂøÉ'
        };
        
        console.log('ËΩ¶ËΩΩÈÄöËØùÁ≥ªÁªüÂ∑≤ÂàõÂª∫');
    }

    // ÂàùÂßãÂåñÊñπÊ≥ïÔºåÂú®È°µÈù¢Âä†ËΩΩÂÆåÊàêÂêéË∞ÉÁî®
    init() {
        this.bindEvents();
        this.createIncomingCallModal();
        this.createSimulateCallButton();
        console.log('ËΩ¶ËΩΩÈÄöËØù‰∏éÈ°µÈù¢ÁªëÂÆöÂÆåÊàê');
    }

    // ÁªëÂÆö‰∫ã‰ª∂ÁõëÂê¨Âô®
    bindEvents() {
        // Êã®Âè∑ÈîÆÁõò‰∫ã‰ª∂
        document.querySelectorAll('.key').forEach(key => {
            key.addEventListener('click', (e) => {
                const number = e.currentTarget.dataset.number;
                this.addDigit(number);
                this.playKeyTone(number);
            });
        });

        // Ê∏ÖÈô§Âè∑Á†ÅÊåâÈíÆ
        const clearButton = document.getElementById('clearNumber');
        if (clearButton) {
            clearButton.addEventListener('click', () => {
                this.clearNumber();
            });
        }

        // Êã®ÊâìÁîµËØùÊåâÈíÆ
        const makeCallButton = document.getElementById('makeCall');
        if (makeCallButton) {
            makeCallButton.addEventListener('click', () => {
                this.makeCall();
            });
        }

        // ÈÄöËØùÊéßÂà∂ÊåâÈíÆ
        this.bindCallControlEvents();

        // ÈÄöËØùËÆ∞ÂΩïÂíåËÅîÁ≥ª‰∫∫Âø´ÈÄüÊã®Âè∑
        this.bindQuickDialEvents();

        // ÈîÆÁõòËæìÂÖ•ÊîØÊåÅ
        document.addEventListener('keydown', (e) => {
            this.handleKeyboardInput(e);
        });
    }

    // ÁªëÂÆöÈÄöËØùÊéßÂà∂‰∫ã‰ª∂
    bindCallControlEvents() {
        const controls = {
            'muteBtn': () => this.toggleMute(),
            'speakerBtn': () => this.toggleSpeaker(),
            'holdBtn': () => this.toggleHold(),
            'endCallBtn': () => this.endCall(),
            'keypadBtn': () => this.showKeypadInCall(),
            'addCallBtn': () => this.addCall()
        };

        Object.entries(controls).forEach(([id, handler]) => {
            const element = document.getElementById(id);
            if (element) {
                element.addEventListener('click', handler);
            }
        });
    }

    // ÁªëÂÆöÂø´ÈÄüÊã®Âè∑‰∫ã‰ª∂
    bindQuickDialEvents() {
        document.querySelectorAll('.call-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const number = e.currentTarget.dataset.number;
                if (number) {
                    this.quickDial(number);
                }
            });
        });
    }

    // ÂàõÂª∫Ê®°ÊãüÊù•ÁîµÊåâÈíÆ
    createSimulateCallButton() {
        const button = document.createElement('button');
        button.id = 'simulateIncomingCall';
        button.className = 'simulate-call-btn';
        button.innerHTML = 'üì≤ Ê®°ÊãüÊù•Áîµ';
        button.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            background: linear-gradient(135deg, #e74c3c, #c0392b);
            color: white;
            border: none;
            padding: 12px 20px;
            border-radius: 8px;
            font-size: 14px;
            font-weight: 600;
            cursor: pointer;
            z-index: 10000;
            box-shadow: 0 4px 15px rgba(231, 76, 60, 0.3);
            transition: all 0.3s ease;
        `;
        
        button.addEventListener('mouseenter', () => {
            button.style.transform = 'translateY(-2px)';
            button.style.boxShadow = '0 6px 20px rgba(231, 76, 60, 0.4)';
        });
        
        button.addEventListener('mouseleave', () => {
            button.style.transform = 'translateY(0)';
            button.style.boxShadow = '0 4px 15px rgba(231, 76, 60, 0.3)';
        });
        
        button.addEventListener('click', () => {
            this.simulateIncomingCall();
        });
        
        document.body.appendChild(button);
    }

    // ÂàõÂª∫Êù•ÁîµÂºπÁ™ó
    createIncomingCallModal() {
        const modal = document.createElement('div');
        modal.id = 'incomingCallModal';
        modal.className = 'incoming-call-modal hidden';
        modal.innerHTML = `
            <div class="incoming-call-overlay"></div>
            <div class="incoming-call-content">
                <div class="incoming-call-header">
                    <div class="incoming-call-avatar">üë§</div>
                    <div class="incoming-call-info">
                        <div class="incoming-caller-name" id="incomingCallerName">Âº†‰∏â</div>
                        <div class="incoming-caller-number" id="incomingCallerNumber">13800138000</div>
                        <div class="incoming-call-status">Êù•Áîµ‰∏≠...</div>
                    </div>
                </div>
                <div class="incoming-call-actions">
                    <button class="incoming-call-btn decline" id="declineCall">
                        <span class="btn-icon">üìû</span>
                        <span class="btn-text">ÊãíÊé•</span>
                    </button>
                    <button class="incoming-call-btn answer" id="answerCall">
                        <span class="btn-icon">üìû</span>
                        <span class="btn-text">Êé•Âê¨</span>
                    </button>
                </div>
            </div>
        `;
        
        // Ê∑ªÂä†Ê†∑Âºè
        const style = document.createElement('style');
        style.textContent = `
            .incoming-call-modal {
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                z-index: 9999;
                display: flex;
                align-items: center;
                justify-content: center;
                animation: fadeIn 0.3s ease-out;
            }
            
            .incoming-call-modal.hidden {
                display: none;
            }
            
            .incoming-call-overlay {
                position: absolute;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background: rgba(0, 0, 0, 0.8);
                backdrop-filter: blur(10px);
            }
            
            .incoming-call-content {
                background: linear-gradient(135deg, #2c3e50 0%, #34495e 50%, #3a4a5c 100%);
                border: 1px solid rgba(127, 140, 141, 0.3);
                border-radius: 20px;
                padding: 30px;
                text-align: center;
                position: relative;
                box-shadow: 0 20px 60px rgba(0, 0, 0, 0.5);
                backdrop-filter: blur(20px);
                animation: slideUp 0.4s ease-out;
                min-width: 320px;
            }
            
            .incoming-call-header {
                margin-bottom: 30px;
            }
            
            .incoming-call-avatar {
                width: 100px;
                height: 100px;
                background: linear-gradient(135deg, #3498db, #1abc9c);
                border-radius: 50%;
                display: flex;
                align-items: center;
                justify-content: center;
                font-size: 48px;
                margin: 0 auto 20px;
                box-shadow: 0 10px 30px rgba(52, 152, 219, 0.4);
                animation: pulse 2s infinite;
            }
            
            .incoming-caller-name {
                font-size: 24px;
                font-weight: 600;
                color: #ecf0f1;
                margin-bottom: 8px;
            }
            
            .incoming-caller-number {
                font-size: 16px;
                color: #bdc3c7;
                margin-bottom: 8px;
            }
            
            .incoming-call-status {
                font-size: 14px;
                color: #1abc9c;
                font-weight: 500;
            }
            
            .incoming-call-actions {
                display: flex;
                gap: 20px;
                justify-content: center;
            }
            
            .incoming-call-btn {
                width: 80px;
                height: 80px;
                border-radius: 50%;
                border: none;
                cursor: pointer;
                transition: all 0.3s ease;
                display: flex;
                flex-direction: column;
                align-items: center;
                justify-content: center;
                font-weight: 600;
                color: white;
            }
            
            .incoming-call-btn.answer {
                background: linear-gradient(135deg, #27ae60, #2ecc71);
                box-shadow: 0 8px 25px rgba(39, 174, 96, 0.4);
            }
            
            .incoming-call-btn.decline {
                background: linear-gradient(135deg, #e74c3c, #c0392b);
                box-shadow: 0 8px 25px rgba(231, 76, 60, 0.4);
            }
            
            .incoming-call-btn:hover {
                transform: translateY(-3px) scale(1.1);
            }
            
            .btn-icon {
                font-size: 24px;
                margin-bottom: 4px;
            }
            
            .btn-text {
                font-size: 12px;
            }
            
            @keyframes fadeIn {
                from { opacity: 0; }
                to { opacity: 1; }
            }
            
            @keyframes slideUp {
                from {
                    opacity: 0;
                    transform: translateY(30px);
                }
                to {
                    opacity: 1;
                    transform: translateY(0);
                }
            }
            
            @keyframes pulse {
                0%, 100% { transform: scale(1); }
                50% { transform: scale(1.05); }
            }
        `;
        
        document.head.appendChild(style);
        document.body.appendChild(modal);
        
        // ÁªëÂÆöÊù•ÁîµÂºπÁ™ó‰∫ã‰ª∂
        const answerButton = document.getElementById('answerCall');
        const declineButton = document.getElementById('declineCall');
        
        if (answerButton) {
            answerButton.addEventListener('click', () => {
                this.answerIncomingCall();
            });
        }
        
        if (declineButton) {
            declineButton.addEventListener('click', () => {
                this.declineIncomingCall();
            });
        }
    }

    // Ê®°ÊãüÊù•ÁîµÂäüËÉΩ
    simulateIncomingCall() {
        if (this.isInCall) {
            this.showNotification('ÂΩìÂâçÊ≠£Âú®ÈÄöËØù‰∏≠', 'warning');
            return;
        }

        // ÈöèÊú∫ÈÄâÊã©‰∏Ä‰∏™ËÅîÁ≥ª‰∫∫Êù•Áîµ
        const numbers = Object.keys(this.contacts);
        const randomNumber = numbers[Math.floor(Math.random() * numbers.length)];
        const callerName = this.contacts[randomNumber];
        
        this.showIncomingCall(callerName, randomNumber);
        this.playRingtone();
    }

    // ÊòæÁ§∫Êù•ÁîµÁïåÈù¢
    showIncomingCall(name, number) {
        const modal = document.getElementById('incomingCallModal');
        const nameElement = document.getElementById('incomingCallerName');
        const numberElement = document.getElementById('incomingCallerNumber');
        
        if (modal && nameElement && numberElement) {
            nameElement.textContent = name;
            numberElement.textContent = number;
            modal.classList.remove('hidden');
        }
        
        // Â≠òÂÇ®Êù•Áîµ‰ø°ÊÅØ
        this.currentCall = { name, number, type: 'incoming' };
    }

    // Êé•Âê¨Êù•Áîµ
    answerIncomingCall() {
        this.hideIncomingCall();
        this.stopRingtone();
        this.startCall(this.currentCall.name, this.currentCall.number, 'incoming');
        this.showNotification('ÈÄöËØùÂ∑≤Êé•ÈÄö', 'success');
    }

    // ÊãíÊé•Êù•Áîµ
    declineIncomingCall() {
        this.hideIncomingCall();
        this.stopRingtone();
        this.addCallToHistory(this.currentCall.name, this.currentCall.number, 'missed');
        this.currentCall = null;
        this.showNotification('Êù•ÁîµÂ∑≤ÊãíÊé•', 'info');
    }

    // ÈöêËóèÊù•ÁîµÁïåÈù¢
    hideIncomingCall() {
        const modal = document.getElementById('incomingCallModal');
        if (modal) {
            modal.classList.add('hidden');
        }
    }

    // Ê∑ªÂä†Êï∞Â≠óÂà∞Âè∑Á†ÅÊòæÁ§∫
    addDigit(digit) {
        const phoneNumber = document.getElementById('phoneNumber');
        if (!phoneNumber) return;
        
        const currentValue = phoneNumber.value;
        
        // ÈôêÂà∂Âè∑Á†ÅÈïøÂ∫¶
        if (currentValue.length < 20) {
            phoneNumber.value = currentValue + digit;
            this.animateKeyPress(digit);
        }
    }

    // Ê∏ÖÈô§Âè∑Á†Å
    clearNumber() {
        const phoneNumber = document.getElementById('phoneNumber');
        if (!phoneNumber) return;
        
        const currentValue = phoneNumber.value;
        
        if (currentValue.length > 0) {
            phoneNumber.value = currentValue.slice(0, -1);
            this.animateButton('clearNumber');
        }
    }

    // Êã®ÊâìÁîµËØù
    makeCall() {
        const phoneNumber = document.getElementById('phoneNumber');
        if (!phoneNumber) return;
        
        const number = phoneNumber.value.trim();
        
        if (!number) {
            this.showNotification('ËØ∑ËæìÂÖ•ÁîµËØùÂè∑Á†Å', 'warning');
            return;
        }
        
        if (this.isInCall) {
            this.showNotification('ÂΩìÂâçÊ≠£Âú®ÈÄöËØù‰∏≠', 'warning');
            return;
        }
        
        const callerName = this.contacts[number] || 'Êú™Áü•ËÅîÁ≥ª‰∫∫';
        this.startCall(callerName, number, 'outgoing');
        this.showNotification(`Ê≠£Âú®Êã®Êâì ${callerName}`, 'info');
    }

    // Âø´ÈÄüÊã®Âè∑
    quickDial(number) {
        if (this.isInCall) {
            this.showNotification('ÂΩìÂâçÊ≠£Âú®ÈÄöËØù‰∏≠', 'warning');
            return;
        }
        
        const callerName = this.contacts[number] || 'Êú™Áü•ËÅîÁ≥ª‰∫∫';
        const phoneNumber = document.getElementById('phoneNumber');
        if (phoneNumber) {
            phoneNumber.value = number;
        }
        this.startCall(callerName, number, 'outgoing');
        this.showNotification(`Ê≠£Âú®Êã®Êâì ${callerName}`, 'info');
    }

    // ÂºÄÂßãÈÄöËØù
    startCall(name, number, type) {
        this.isInCall = true;
        this.currentCall = { name, number, type };
        this.callStartTime = new Date();
        
        // ÈöêËóèÊã®Âè∑Âô®ÔºåÊòæÁ§∫ÈÄöËØùÁïåÈù¢
        const dialerWidget = document.getElementById('dialerWidget');
        const callWidget = document.getElementById('callWidget');
        
        if (dialerWidget) dialerWidget.classList.add('hidden');
        if (callWidget) callWidget.classList.remove('hidden');
        
        // Êõ¥Êñ∞ÈÄöËØùÁïåÈù¢‰ø°ÊÅØ
        const callerNameElement = document.getElementById('callerName');
        const callerNumberElement = document.getElementById('callerNumber');
        const callStateElement = document.getElementById('callState');
        
        if (callerNameElement) callerNameElement.textContent = name;
        if (callerNumberElement) callerNumberElement.textContent = number;
        if (callStateElement) callStateElement.textContent = type === 'incoming' ? 'ÈÄöËØù‰∏≠...' : 'Ê≠£Âú®ËøûÊé•...';
        
        // ÂêØÂä®ÈÄöËØùËÆ°Êó∂Âô®
        this.startCallTimer();
        
        // Ê®°ÊãüËøûÊé•Âª∂ËøüÔºà‰ªÖÁî®‰∫éÊã®Âá∫ÁîµËØùÔºâ
        if (type === 'outgoing') {
            setTimeout(() => {
                if (this.isInCall && callStateElement) {
                    callStateElement.textContent = 'ÈÄöËØù‰∏≠...';
                    this.showNotification('ÈÄöËØùÂ∑≤Êé•ÈÄö', 'success');
                }
            }, 2000);
        }
        
        // Ê∑ªÂä†Âà∞ÈÄöËØùËÆ∞ÂΩï
        this.addCallToHistory(name, number, type);
    }

    // ÁªìÊùüÈÄöËØù
    endCall() {
        if (!this.isInCall) return;
        
        this.isInCall = false;
        this.stopCallTimer();
        
        // ÊòæÁ§∫Êã®Âè∑Âô®ÔºåÈöêËóèÈÄöËØùÁïåÈù¢
        const callWidget = document.getElementById('callWidget');
        const dialerWidget = document.getElementById('dialerWidget');
        
        if (callWidget) callWidget.classList.add('hidden');
        if (dialerWidget) dialerWidget.classList.remove('hidden');
        
        // ÈáçÁΩÆÈÄöËØùÁä∂ÊÄÅ
        this.resetCallState();
        
        // Ê∏ÖÁ©∫Âè∑Á†ÅÊòæÁ§∫
        const phoneNumber = document.getElementById('phoneNumber');
        if (phoneNumber) {
            phoneNumber.value = '';
        }
        
        this.showNotification('ÈÄöËØùÂ∑≤ÁªìÊùü', 'info');
        this.currentCall = null;
    }

    // ÂêØÂä®ÈÄöËØùËÆ°Êó∂Âô®
    startCallTimer() {
        this.callTimer = setInterval(() => {
            if (this.callStartTime && this.isInCall) {
                const elapsed = Math.floor((new Date() - this.callStartTime) / 1000);
                const minutes = Math.floor(elapsed / 60);
                const seconds = elapsed % 60;
                const timeString = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
                const callTimerElement = document.getElementById('callTimer');
                if (callTimerElement) {
                    callTimerElement.textContent = timeString;
                }
            }
        }, 1000);
    }

    // ÂÅúÊ≠¢ÈÄöËØùËÆ°Êó∂Âô®
    stopCallTimer() {
        if (this.callTimer) {
            clearInterval(this.callTimer);
            this.callTimer = null;
        }
    }

    // ÂàáÊç¢ÈùôÈü≥Áä∂ÊÄÅ
    toggleMute() {
        this.isMuted = !this.isMuted;
        const muteBtn = document.getElementById('muteBtn');
        if (!muteBtn) return;
        
        const icon = muteBtn.querySelector('.control-icon');
        const label = muteBtn.querySelector('.control-label');
        
        if (this.isMuted) {
            if (icon) icon.textContent = 'üîá';
            if (label) label.textContent = 'ÂèñÊ∂àÈùôÈü≥';
            muteBtn.classList.add('active');
            this.showNotification('Â∑≤ÈùôÈü≥', 'info');
        } else {
            if (icon) icon.textContent = 'üé§';
            if (label) label.textContent = 'ÈùôÈü≥';
            muteBtn.classList.remove('active');
            this.showNotification('Â∑≤ÂèñÊ∂àÈùôÈü≥', 'info');
        }
        
        this.animateButton('muteBtn');
    }

    // ÂàáÊç¢ÂÖçÊèêÁä∂ÊÄÅ
    toggleSpeaker() {
        this.isSpeakerOn = !this.isSpeakerOn;
        const speakerBtn = document.getElementById('speakerBtn');
        if (!speakerBtn) return;
        
        const icon = speakerBtn.querySelector('.control-icon');
        const label = speakerBtn.querySelector('.control-label');
        
        if (this.isSpeakerOn) {
            if (icon) icon.textContent = 'üîä';
            if (label) label.textContent = 'ÂÖ≥Èó≠ÂÖçÊèê';
            speakerBtn.classList.add('active');
            this.showNotification('ÂÖçÊèêÂ∑≤ÂºÄÂêØ', 'info');
        } else {
            if (icon) icon.textContent = 'üîà';
            if (label) label.textContent = 'ÂÖçÊèê';
            speakerBtn.classList.remove('active');
            this.showNotification('ÂÖçÊèêÂ∑≤ÂÖ≥Èó≠', 'info');
        }
        
        this.animateButton('speakerBtn');
    }

    // ÂàáÊç¢‰øùÊåÅÁä∂ÊÄÅ
    toggleHold() {
        this.isOnHold = !this.isOnHold;
        const holdBtn = document.getElementById('holdBtn');
        if (!holdBtn) return;
        
        const icon = holdBtn.querySelector('.control-icon');
        const label = holdBtn.querySelector('.control-label');
        const callState = document.getElementById('callState');
        
        if (this.isOnHold) {
            if (icon) icon.textContent = '‚ñ∂Ô∏è';
            if (label) label.textContent = 'ÊÅ¢Â§ç';
            holdBtn.classList.add('active');
            if (callState) callState.textContent = 'ÈÄöËØù‰øùÊåÅ‰∏≠...';
            this.showNotification('ÈÄöËØùÂ∑≤‰øùÊåÅ', 'info');
        } else {
            if (icon) icon.textContent = '‚è∏Ô∏è';
            if (label) label.textContent = '‰øùÊåÅ';
            holdBtn.classList.remove('active');
            if (callState) callState.textContent = 'ÈÄöËØù‰∏≠...';
            this.showNotification('ÈÄöËØùÂ∑≤ÊÅ¢Â§ç', 'info');
        }
        
        this.animateButton('holdBtn');
    }

    // ÈÄöËØù‰∏≠ÊòæÁ§∫ÈîÆÁõò
    showKeypadInCall() {
        // ËøôÈáåÂèØ‰ª•ÂÆûÁé∞ÈÄöËØù‰∏≠ÁöÑÈîÆÁõòÂäüËÉΩ
        this.showNotification('ÈîÆÁõòÂäüËÉΩ', 'info');
        this.animateButton('keypadBtn');
    }

    // Ê∑ªÂä†ÈÄöËØù
    addCall() {
        this.showNotification('Â§öÊñπÈÄöËØùÂäüËÉΩ', 'info');
        this.animateButton('addCallBtn');
    }

    // ÈáçÁΩÆÈÄöËØùÁä∂ÊÄÅ
    resetCallState() {
        this.isMuted = false;
        this.isSpeakerOn = false;
        this.isOnHold = false;
        
        // ÈáçÁΩÆÊåâÈíÆÁä∂ÊÄÅ
        const buttons = ['muteBtn', 'speakerBtn', 'holdBtn'];
        buttons.forEach(btnId => {
            const btn = document.getElementById(btnId);
            if (btn) {
                btn.classList.remove('active');
            }
        });
        
        // ÈáçÁΩÆÊåâÈíÆÊñáÊú¨
        this.updateButtonText('muteBtn', 'üé§', 'ÈùôÈü≥');
        this.updateButtonText('speakerBtn', 'üîà', 'ÂÖçÊèê');
        this.updateButtonText('holdBtn', '‚è∏Ô∏è', '‰øùÊåÅ');
    }

    // Êõ¥Êñ∞ÊåâÈíÆÊñáÊú¨
    updateButtonText(btnId, icon, label) {
        const btn = document.getElementById(btnId);
        if (btn) {
            const iconElement = btn.querySelector('.control-icon');
            const labelElement = btn.querySelector('.control-label');
            if (iconElement) iconElement.textContent = icon;
            if (labelElement) labelElement.textContent = label;
        }
    }

    // Ê∑ªÂä†ÈÄöËØùËÆ∞ÂΩï
    addCallToHistory(name, number, type) {
        const callHistory = document.getElementById('callHistory');
        if (!callHistory) return;
        
        const now = new Date();
        const timeString = `${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}`;
        
        const typeText = {
            'incoming': 'Â∑≤Êé•Êù•Áîµ',
            'outgoing': 'Â∑≤Êã®ÁîµËØù',
            'missed': 'Êú™Êé•Êù•Áîµ'
        };
        
        const callItem = document.createElement('div');
        callItem.className = `call-item ${type}`;
        callItem.innerHTML = `
            <div class="call-info">
                <div class="call-name">${name}</div>
                <div class="call-details">
                    <span class="call-time">${timeString}</span>
                    <span class="call-type">${typeText[type]}</span>
                </div>
            </div>
            <div class="call-actions">
                <button class="action-btn call-btn" data-number="${number}">üìû</button>
                <button class="action-btn msg-btn">üí¨</button>
            </div>
        `;
        
        // Ê∑ªÂä†Âà∞ÂàóË°®È°∂ÈÉ®
        callHistory.insertBefore(callItem, callHistory.firstChild);
        
        // ÁªëÂÆöÂø´ÈÄüÊã®Âè∑‰∫ã‰ª∂
        const callBtn = callItem.querySelector('.call-btn');
        if (callBtn) {
            callBtn.addEventListener('click', (e) => {
                const number = e.currentTarget.dataset.number;
                this.quickDial(number);
            });
        }
        
        // ÈôêÂà∂ËÆ∞ÂΩïÊï∞Èáè
        const items = callHistory.querySelectorAll('.call-item');
        if (items.length > 10) {
            items[items.length - 1].remove();
        }
    }

    // ÈîÆÁõòËæìÂÖ•Â§ÑÁêÜ
    handleKeyboardInput(e) {
        if (this.isInCall) return;
        
        const key = e.key;
        
        // Êï∞Â≠óÈîÆ
        if (/^[0-9*#]$/.test(key)) {
            e.preventDefault();
            this.addDigit(key);
        }
        
        // ÈÄÄÊ†ºÈîÆ
        if (key === 'Backspace') {
            e.preventDefault();
            this.clearNumber();
        }
        
        // ÂõûËΩ¶ÈîÆÊã®Âè∑
        if (key === 'Enter') {
            e.preventDefault();
            this.makeCall();
        }
    }

    // Êí≠ÊîæÊåâÈîÆÈü≥Êïà
    playKeyTone(key) {
        // ËøôÈáåÂèØ‰ª•Ê∑ªÂä†ÂÆûÈôÖÁöÑÈü≥ÊïàÊí≠Êîæ
        console.log(`Êí≠ÊîæÊåâÈîÆÈü≥: ${key}`);
    }

    // Êí≠ÊîæÈìÉÂ£∞
    playRingtone() {
        console.log('Êí≠ÊîæÊù•ÁîµÈìÉÂ£∞');
        // ËøôÈáåÂèØ‰ª•Ê∑ªÂä†ÂÆûÈôÖÁöÑÈìÉÂ£∞Êí≠Êîæ
    }

    // ÂÅúÊ≠¢ÈìÉÂ£∞
    stopRingtone() {
        console.log('ÂÅúÊ≠¢ÈìÉÂ£∞');
        // ËøôÈáåÂèØ‰ª•Ê∑ªÂä†ÂÅúÊ≠¢ÈìÉÂ£∞ÁöÑ‰ª£Á†Å
    }

    // ÊåâÈíÆÂä®ÁîªÊïàÊûú
    animateButton(buttonId) {
        const button = document.getElementById(buttonId);
        if (button) {
            button.style.transform = 'scale(0.95)';
            setTimeout(() => {
                button.style.transform = '';
            }, 150);
        }
    }

    // ÊåâÈîÆÂä®ÁîªÊïàÊûú
    animateKeyPress(key) {
        const keyElement = document.querySelector(`[data-number="${key}"]`);
        if (keyElement) {
            keyElement.style.transform = 'scale(0.9)';
            keyElement.style.background = 'rgba(52, 152, 219, 0.4)';
            setTimeout(() => {
                keyElement.style.transform = '';
                keyElement.style.background = '';
            }, 200);
        }
    }

    // ÊòæÁ§∫ÈÄöÁü•
    showNotification(message, type = 'info') {
        // ÂàõÂª∫ÈÄöÁü•ÂÖÉÁ¥†
        const notification = document.createElement('div');
        notification.className = `notification notification-${type}`;
        notification.textContent = message;
        
        // Ê∑ªÂä†Ê†∑Âºè
        notification.style.cssText = `
            position: fixed;
            top: 80px;
            right: 20px;
            background: ${this.getNotificationColor(type)};
            color: white;
            padding: 12px 20px;
            border-radius: 8px;
            font-size: 14px;
            font-weight: 500;
            z-index: 9998;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
            animation: slideInRight 0.3s ease-out;
            max-width: 300px;
        `;
        
        // Ê∑ªÂä†Âä®ÁîªÊ†∑Âºè
        if (!document.querySelector('#notificationStyles')) {
            const style = document.createElement('style');
            style.id = 'notificationStyles';
            style.textContent = `
                @keyframes slideInRight {
                    from {
                        opacity: 0;
                        transform: translateX(100%);
                    }
                    to {
                        opacity: 1;
                        transform: translateX(0);
                    }
                }
                
                @keyframes slideOutRight {
                    from {
                        opacity: 1;
                        transform: translateX(0);
                    }
                    to {
                        opacity: 0;
                        transform: translateX(100%);
                    }
                }
            `;
            document.head.appendChild(style);
        }
        
        document.body.appendChild(notification);
        
        // Ëá™Âä®ÁßªÈô§ÈÄöÁü•
        setTimeout(() => {
            notification.style.animation = 'slideOutRight 0.3s ease-out';
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.parentNode.removeChild(notification);
                }
            }, 300);
        }, 3000);
    }

    // Ëé∑ÂèñÈÄöÁü•È¢úËâ≤
    getNotificationColor(type) {
        const colors = {
            'success': 'linear-gradient(135deg, #27ae60, #2ecc71)',
            'warning': 'linear-gradient(135deg, #f39c12, #e67e22)',
            'error': 'linear-gradient(135deg, #e74c3c, #c0392b)',
            'info': 'linear-gradient(135deg, #3498db, #2980b9)'
        };
        return colors[type] || colors.info;
    }


    // Ëé∑ÂèñÁ≥ªÁªüÈÖçÁΩÆ
    getConfig() {
        return {
            contacts: this.contacts,
            // ÂèØ‰ª•Ê∑ªÂä†ÂÖ∂‰ªñÈÖçÁΩÆÈ°π
            maxCallHistory: 10,
            keyToneEnabled: true,
            ringtoneEnabled: true
        };
    }

    // Ëé∑ÂèñÂΩìÂâçÁä∂ÊÄÅ
    getState() {
        return {
            currentCall: this.currentCall,
            isInCall: this.isInCall,
            isMuted: this.isMuted,
            isSpeakerOn: this.isSpeakerOn,
            isOnHold: this.isOnHold,
            callStartTime: this.callStartTime,
            // ‰øùÂ≠òÈÄöËØùËÆ∞ÂΩïÔºà‰ªéDOM‰∏≠Ëé∑ÂèñÔºâ
            callHistory: this.getCallHistoryFromDOM()
        };
    }

    // ÊÅ¢Â§çÁä∂ÊÄÅ
    // Âú® CarPhoneSystem Á±ª‰∏≠‰øÆÊîπ restoreState ÊñπÊ≥ï
    restoreState(savedData) {
        if (!savedData) return;
        
        // Â¶ÇÊûú‰º†ÂÖ•ÁöÑÊòØÂÆåÊï¥ÁöÑ‰øùÂ≠òÊï∞ÊçÆÔºàÂåÖÂê´ config Âíå stateÔºâÔºåÂàôÊèêÂèñ state ÈÉ®ÂàÜ
        const stateData = savedData.state || savedData;
        
        // ÊÅ¢Â§çÂü∫Êú¨Áä∂ÊÄÅ
        this.currentCall = stateData.currentCall || null;
        this.isInCall = stateData.isInCall || false;
        this.isMuted = stateData.isMuted || false;
        this.isSpeakerOn = stateData.isSpeakerOn || false;
        this.isOnHold = stateData.isOnHold || false;
        this.callStartTime = stateData.callStartTime ? new Date(stateData.callStartTime) : null;
        
        // Â¶ÇÊûúÊúâÈÖçÁΩÆÊï∞ÊçÆÔºå‰πüÊÅ¢Â§çÈÖçÁΩÆ
        if (savedData.config && savedData.config.contacts) {
            this.contacts = savedData.config.contacts;
        }
        
        // Â¶ÇÊûúÊúâËøõË°å‰∏≠ÁöÑÈÄöËØùÔºåÊÅ¢Â§çÈÄöËØùÁïåÈù¢
        if (this.isInCall && this.currentCall) {
            this.restoreCallInterface();
        }
        
        // ÊÅ¢Â§çÈÄöËØùËÆ∞ÂΩï
        if (stateData.callHistory) {
            this.restoreCallHistory(stateData.callHistory);
            console.log("ÈÄöËØùËÆ∞ÂΩïÊÅ¢Â§ç");
        }
        
        console.log('Á≥ªÁªüÁä∂ÊÄÅÂ∑≤ÊÅ¢Â§ç');
    }

    // ‰ªéDOMËé∑ÂèñÈÄöËØùËÆ∞ÂΩï
    getCallHistoryFromDOM() {
        const callHistory = document.getElementById('callHistory');
        if (!callHistory) return [];
        
        const items = callHistory.querySelectorAll('.call-item');
        const history = [];
        
        items.forEach(item => {
            const name = item.querySelector('.call-name')?.textContent || '';
            const time = item.querySelector('.call-time')?.textContent || '';
            const type = item.querySelector('.call-type')?.textContent || '';
            const number = item.querySelector('.call-btn')?.dataset.number || '';
            const callType = item.classList.contains('incoming') ? 'incoming' : 
                            item.classList.contains('outgoing') ? 'outgoing' : 'missed';
            
            history.push({ name, number, time, type, callType });
        });
        
        return history;
    }

    // ÊÅ¢Â§çÈÄöËØùËÆ∞ÂΩï
    restoreCallHistory(historyData) {
        const callHistory = document.getElementById('callHistory');
        if (!callHistory || !historyData.length) return;
        
        // Ê∏ÖÁ©∫Áé∞ÊúâËÆ∞ÂΩï
        callHistory.innerHTML = '';
        
        // ÈáçÊñ∞Ê∑ªÂä†ËÆ∞ÂΩï
        historyData.forEach(record => {
            const callItem = document.createElement('div');
            callItem.className = `call-item ${record.callType}`;
            callItem.innerHTML = `
                <div class="call-info">
                    <div class="call-name">${record.name}</div>
                    <div class="call-details">
                        <span class="call-time">${record.time}</span>
                        <span class="call-type">${record.type}</span>
                    </div>
                </div>
                <div class="call-actions">
                    <button class="action-btn call-btn" data-number="${record.number}">üìû</button>
                    <button class="action-btn msg-btn">üí¨</button>
                </div>
            `;
            
            callHistory.appendChild(callItem);
            
            // ÈáçÊñ∞ÁªëÂÆö‰∫ã‰ª∂
            const callBtn = callItem.querySelector('.call-btn');
            if (callBtn) {
                callBtn.addEventListener('click', (e) => {
                    const number = e.currentTarget.dataset.number;
                    this.quickDial(number);
                });
            }
        });
    }

    // ÊÅ¢Â§çÈÄöËØùÁïåÈù¢
    restoreCallInterface() {
        // ÊòæÁ§∫ÈÄöËØùÁïåÈù¢ÔºåÈöêËóèÊã®Âè∑Âô®
        const dialerWidget = document.getElementById('dialerWidget');
        const callWidget = document.getElementById('callWidget');
        
        if (dialerWidget) dialerWidget.classList.add('hidden');
        if (callWidget) callWidget.classList.remove('hidden');
        
        // Êõ¥Êñ∞ÈÄöËØù‰ø°ÊÅØ
        const callerNameElement = document.getElementById('callerName');
        const callerNumberElement = document.getElementById('callerNumber');
        const callStateElement = document.getElementById('callState');
        
        if (this.currentCall) {
            if (callerNameElement) callerNameElement.textContent = this.currentCall.name;
            if (callerNumberElement) callerNumberElement.textContent = this.currentCall.number;
            if (callStateElement) {
                callStateElement.textContent = this.isOnHold ? 'ÈÄöËØù‰øùÊåÅ‰∏≠...' : 'ÈÄöËØù‰∏≠...';
            }
        }
        
        // ÊÅ¢Â§çÊåâÈíÆÁä∂ÊÄÅ
        this.restoreButtonStates();
        
        // ÈáçÊñ∞ÂêØÂä®ËÆ°Êó∂Âô®
        if (this.callStartTime) {
            this.startCallTimer();
        }
    }

    // ÊÅ¢Â§çÊåâÈíÆÁä∂ÊÄÅ
    restoreButtonStates() {
        // ÈùôÈü≥ÊåâÈíÆ
        const muteBtn = document.getElementById('muteBtn');
        if (muteBtn) {
            if (this.isMuted) {
                muteBtn.classList.add('active');
                this.updateButtonText('muteBtn', 'üîá', 'ÂèñÊ∂àÈùôÈü≥');
            } else {
                muteBtn.classList.remove('active');
                this.updateButtonText('muteBtn', 'üé§', 'ÈùôÈü≥');
            }
        }
        
        // ÂÖçÊèêÊåâÈíÆ
        const speakerBtn = document.getElementById('speakerBtn');
        if (speakerBtn) {
            if (this.isSpeakerOn) {
                speakerBtn.classList.add('active');
                this.updateButtonText('speakerBtn', 'üîä', 'ÂÖ≥Èó≠ÂÖçÊèê');
            } else {
                speakerBtn.classList.remove('active');
                this.updateButtonText('speakerBtn', 'üîà', 'ÂÖçÊèê');
            }
        }
        
        // ‰øùÊåÅÊåâÈíÆ
        const holdBtn = document.getElementById('holdBtn');
        if (holdBtn) {
            if (this.isOnHold) {
                holdBtn.classList.add('active');
                this.updateButtonText('holdBtn', '‚ñ∂Ô∏è', 'ÊÅ¢Â§ç');
            } else {
                holdBtn.classList.remove('active');
                this.updateButtonText('holdBtn', '‚è∏Ô∏è', '‰øùÊåÅ');
            }
        }
    }

    // Â∫èÂàóÂåñÂÆû‰æãÊï∞ÊçÆÔºàÁî®‰∫éÂÖ∂‰ªñÈÄö‰ø°ÊñπÂºèÔºâ
    serialize() {
        return JSON.stringify(this.getState());
    }

    // ÂèçÂ∫èÂàóÂåñÊï∞ÊçÆ
    deserialize(data) {
        try {
            const parsedData = typeof data === 'string' ? JSON.parse(data) : data;
            this.restoreState(parsedData);
        } catch (error) {
            console.error('ÂèçÂ∫èÂàóÂåñÂ§±Ë¥•:', error);
        }
    }

    // Êõ¥Êñ∞ÊòæÁ§∫Áä∂ÊÄÅ
    updateDisplay() {
        // Êõ¥Êñ∞Âè∑Á†ÅÊòæÁ§∫
        const phoneNumber = document.getElementById('phoneNumber');
        if (phoneNumber && this.currentCall && !this.isInCall) {
            phoneNumber.value = this.currentCall.number || '';
        }
        
        // Êõ¥Êñ∞ÈÄöËØùÁïåÈù¢ÊòæÁ§∫
        if (this.isInCall && this.currentCall) {
            this.updateCallDisplay();
        } else {
            this.updateDialerDisplay();
        }
        
        // Êõ¥Êñ∞ÊåâÈíÆÁä∂ÊÄÅ
        this.updateAllButtonStates();
        
        // Êõ¥Êñ∞ÈÄöËØùËÆ∞ÂΩïÊòæÁ§∫
        this.updateCallHistoryDisplay();
        
        console.log('ÊòæÁ§∫Áä∂ÊÄÅÂ∑≤Êõ¥Êñ∞');
    }

    // Êõ¥Êñ∞ÈÄöËØùÁïåÈù¢ÊòæÁ§∫
    updateCallDisplay() {
        const dialerWidget = document.getElementById('dialerWidget');
        const callWidget = document.getElementById('callWidget');
        
        if (dialerWidget) dialerWidget.classList.add('hidden');
        if (callWidget) callWidget.classList.remove('hidden');
        
        // Êõ¥Êñ∞ÈÄöËØù‰ø°ÊÅØ
        const callerNameElement = document.getElementById('callerName');
        const callerNumberElement = document.getElementById('callerNumber');
        const callStateElement = document.getElementById('callState');
        
        if (this.currentCall) {
            if (callerNameElement) callerNameElement.textContent = this.currentCall.name;
            if (callerNumberElement) callerNumberElement.textContent = this.currentCall.number;
            if (callStateElement) {
                callStateElement.textContent = this.isOnHold ? 'ÈÄöËØù‰øùÊåÅ‰∏≠...' : 'ÈÄöËØù‰∏≠...';
            }
        }
        
        // ÈáçÊñ∞ÂêØÂä®ËÆ°Êó∂Âô®
        if (this.callStartTime && !this.callTimer) {
            this.startCallTimer();
        }
    }

    // Êõ¥Êñ∞Êã®Âè∑Âô®ÊòæÁ§∫
    updateDialerDisplay() {
        const dialerWidget = document.getElementById('dialerWidget');
        const callWidget = document.getElementById('callWidget');
        
        if (dialerWidget) dialerWidget.classList.remove('hidden');
        if (callWidget) callWidget.classList.add('hidden');
    }

    // Êõ¥Êñ∞ÊâÄÊúâÊåâÈíÆÁä∂ÊÄÅ
    updateAllButtonStates() {
        // ÈùôÈü≥ÊåâÈíÆ
        const muteBtn = document.getElementById('muteBtn');
        if (muteBtn) {
            if (this.isMuted) {
                muteBtn.classList.add('active');
                this.updateButtonText('muteBtn', 'üîá', 'ÂèñÊ∂àÈùôÈü≥');
            } else {
                muteBtn.classList.remove('active');
                this.updateButtonText('muteBtn', 'üé§', 'ÈùôÈü≥');
            }
        }
        
        // ÂÖçÊèêÊåâÈíÆ
        const speakerBtn = document.getElementById('speakerBtn');
        if (speakerBtn) {
            if (this.isSpeakerOn) {
                speakerBtn.classList.add('active');
                this.updateButtonText('speakerBtn', 'üîä', 'ÂÖ≥Èó≠ÂÖçÊèê');
            } else {
                speakerBtn.classList.remove('active');
                this.updateButtonText('speakerBtn', 'üîà', 'ÂÖçÊèê');
            }
        }
        
        // ‰øùÊåÅÊåâÈíÆ
        const holdBtn = document.getElementById('holdBtn');
        if (holdBtn) {
            if (this.isOnHold) {
                holdBtn.classList.add('active');
                this.updateButtonText('holdBtn', '‚ñ∂Ô∏è', 'ÊÅ¢Â§ç');
            } else {
                holdBtn.classList.remove('active');
                this.updateButtonText('holdBtn', '‚è∏Ô∏è', '‰øùÊåÅ');
            }
        }
    }

    // Êõ¥Êñ∞ÈÄöËØùËÆ∞ÂΩïÊòæÁ§∫
    updateCallHistoryDisplay() {
        const callHistory = document.getElementById('callHistory');
        if (!callHistory) return;
        
        // ÈáçÊñ∞ÁªëÂÆöÊâÄÊúâÈÄöËØùËÆ∞ÂΩïÁöÑ‰∫ã‰ª∂
        const callBtns = callHistory.querySelectorAll('.call-btn');
        callBtns.forEach(btn => {
            // ÁßªÈô§ÊóßÁöÑ‰∫ã‰ª∂ÁõëÂê¨Âô®ÔºåÊ∑ªÂä†Êñ∞ÁöÑ
            const newBtn = btn.cloneNode(true);
            btn.parentNode.replaceChild(newBtn, btn);
            
            newBtn.addEventListener('click', (e) => {
                const number = e.currentTarget.dataset.number;
                this.quickDial(number);
            });
        });
    }

}

// Ê∑ªÂä†ÈöêËóèÁ±ªÊ†∑Âºè
const style = document.createElement('style');
style.textContent = `
    .hidden {
        display: none !important;
    }
    
    .control-btn.active {
        background: rgba(52, 152, 219, 0.3) !important;
        border-color: #3498db !important;
        color: #3498db !important;
    }
    
    .control-btn.end-call {
        background: linear-gradient(135deg, #e74c3c, #c0392b) !important;
    }
    
    .control-btn.end-call:hover {
        background: linear-gradient(135deg, #c0392b, #a93226) !important;
    }
`;
document.head.appendChild(style);

const carPhoneSystem = new CarPhoneSystem();
// È°µÈù¢Âä†ËΩΩÂÆåÊàêÂêéÂàùÂßãÂåñÁ≥ªÁªü
document.addEventListener('DOMContentLoaded', () => {
    const activeNavBtn = document.querySelector('.nav-btn.active');
    const isPhonePage = activeNavBtn && activeNavBtn.textContent.includes('üìû');
    if (isPhonePage) {
        console.log('‚úÖ ÈÄöËøáÂØºËà™Áä∂ÊÄÅÁ°ÆËÆ§ÔºöËøôÊòØÁîµËØùÈ°µÈù¢');
            // Ëé∑Âèñ‰øùÂ≠òÁöÑÊï∞ÊçÆ
            const savedData = JSON.parse(localStorage.getItem('carPhoneSystemData') || '{}');
            
            // ÊÅ¢Â§çÁä∂ÊÄÅ
            carPhoneSystem.init();
            carPhoneSystem.restoreState(savedData);
            carPhoneSystem.updateDisplay();

            function saveCarPhoneSystemData() {
                try {
                    const systemDataPhone = {
                        isInitialized: true,
                        config: carPhoneSystem.getConfig(),
                        state: carPhoneSystem.getState(),
                        lastSaved: new Date().toISOString()
                    };
                    localStorage.setItem('carPhoneSystemData', JSON.stringify(systemDataPhone));
                    localStorage.setItem('carPhoneSystemInitialized', 'true');
                    console.log('üì± ÁîµËØùÁ≥ªÁªüÊï∞ÊçÆÂ∑≤‰øùÂ≠ò -', new Date().toLocaleTimeString());
                } catch (error) {
                    console.error('‰øùÂ≠òÁîµËØùÁ≥ªÁªüÊï∞ÊçÆÂ§±Ë¥•:', error);
                } 
            }

            setInterval(() => saveCarPhoneSystemData(), 3000);
    }
});

// ÁõëÂê¨localStorageÂèòÂåñ
window.addEventListener('storage', function(event) {
    if (event.key === 'crossPageMessage' && event.newValue) {
        try {
            const message = JSON.parse(event.newValue);
            console.log('Êî∂Âà∞Ë∑®È°µÈù¢Ê∂àÊÅØ:', message);
            
            // Â§ÑÁêÜÊ∂àÊÅØ
            handleCrossPageMessage(message);
        } catch (error) {
            console.error('Ëß£ÊûêË∑®È°µÈù¢Ê∂àÊÅØÂ§±Ë¥•:', error);
        }
    }
});

// È°µÈù¢Âä†ËΩΩÊó∂Ê£ÄÊü•ÊòØÂê¶ÊúâÂæÖÂ§ÑÁêÜÁöÑÊ∂àÊÅØ
document.addEventListener('DOMContentLoaded', function() {
    const pendingMessage = localStorage.getItem('crossPageMessage');
    if (pendingMessage) {
        try {
            const message = JSON.parse(pendingMessage);
            handleCrossPageMessage(message);
            localStorage.removeItem('crossPageMessage');
        } catch (error) {
            console.error('Â§ÑÁêÜÂæÖÂ§ÑÁêÜÊ∂àÊÅØÂ§±Ë¥•:', error);
        }
    }
});

// Â§ÑÁêÜÊ∂àÊÅØÁöÑÂáΩÊï∞
function handleCrossPageMessage(data) {
    if (data.type === 'phone') {
        if (data.content === 'start') {
            const savedData = JSON.parse(localStorage.getItem('carPhoneSystemData') || '{}');
            carPhoneSystem.restoreState(savedData);
            carPhoneSystem.answerIncomingCall();
        }
        else if (data.content === 'end') {
            const savedData = JSON.parse(localStorage.getItem('carPhoneSystemData') || '{}');
            carPhoneSystem.restoreState(savedData);
            carPhoneSystem.declineIncomingCall();
        }
        else if (data.content === 'hang_up') {
            const savedData = JSON.parse(localStorage.getItem('carPhoneSystemData') || '{}');
            carPhoneSystem.restoreState(savedData);
            carPhoneSystem.endCall();
        }
        else if (data.content === 'make') {
            const savedData = JSON.parse(localStorage.getItem('carPhoneSystemData') || '{}');
            carPhoneSystem.restoreState(savedData);
            if (data.contacts && /^\d/.test(String(data.contacts))) { //Êï∞Â≠óÊã®Âè∑
                if (carPhoneSystem.isInCall) {
                    carPhoneSystem.showNotification('ÂΩìÂâçÊ≠£Âú®ÈÄöËØù‰∏≠', 'warning');
                    return;
                }
                let number = data.contacts;
                const callerName = carPhoneSystem.contacts[number] || 'Êú™Áü•ËÅîÁ≥ª‰∫∫';
                carPhoneSystem.startCall(callerName, number, 'outgoing');
                carPhoneSystem.showNotification(`Ê≠£Âú®Êã®Êâì ${callerName}`, 'info');
            }
            else { //ËÅîÁ≥ª‰∫∫
                if (carPhoneSystem.isInCall) {
                    carPhoneSystem.showNotification('ÂΩìÂâçÊ≠£Âú®ÈÄöËØù‰∏≠', 'warning');
                    return;
                }
                const entry = Object.entries(carPhoneSystem.contacts).find(([phone, contactName]) => contactName === data.contacts);
                let number = entry[0];
                const callerName = carPhoneSystem.contacts[number] || 'Êú™Áü•ËÅîÁ≥ª‰∫∫';
                carPhoneSystem.startCall(callerName, number, 'outgoing');
                carPhoneSystem.showNotification(`Ê≠£Âú®Êã®Êâì ${callerName}`, 'info');
            }
        }
    }
}
